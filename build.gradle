plugins {
	id "com.jfrog.artifactory" version "4.24.14" //artifactory support
	id 'groovy' // groovy support
	id 'java' // java support
	id 'application' // creates a JVM executable
	id 'maven-publish' // publish to a maven repo (local or mvn central, has to be defined)
	id 'pmd' // code check, working on source code
	id 'com.github.spotbugs' version '4.7.2' // code check, working on byte code
	id 'com.diffplug.spotless' version '5.14.2'// code format
	id 'com.simonharrer.modernizer' version '2.1.0-1' // detect deprecated APIs
	id 'com.github.onslip.gradle-one-jar' version '1.0.6' // pack a self contained jar
	id 'jacoco' // java code coverage plugin
	id "org.sonarqube" version "3.3" // sonarqube
}

ext {
	//version (changing these should be considered thoroughly!)
	hibernateVersion = '5.3.3.Final'
	javaVersion = JavaVersion.VERSION_1_8

	scriptsLocation = 'gradle' + File.separator + 'scripts' + File.separator //location of script plugins
	mainClass = 'edu.ie3.tools.Main'
}

group = 'com.github.ie3-institute'
version = '0.4.6'
description = 'DWDWeatherTools'
defaultTasks 'build'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion


apply from: scriptsLocation + 'pmd.gradle'
apply from: scriptsLocation + 'spotbugs.gradle'
apply from: scriptsLocation + 'spotless.gradle'
apply from: scriptsLocation + 'modernizer.gradle'
apply from: scriptsLocation + 'checkJavaVersion.gradle'
apply from: scriptsLocation + 'fatJar.gradle'
apply from: scriptsLocation + 'tests.gradle'
apply from: scriptsLocation + 'jacoco.gradle' // jacoco java code coverage
apply from: scriptsLocation + 'sonarqube.gradle' // sonarqube config

repositories {
	mavenCentral() //searches in bintray's repository 'jCenter', which contains Maven Central

	maven { url 'https://jitpack.io' } // allows github repos as dependencies
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

dependencies {
	//hibernate
	implementation 'org.hibernate:hibernate-core:' + hibernateVersion
	implementation 'org.hibernate:hibernate-ehcache:' + hibernateVersion

	//JAXB (needed for hibernate, but not longer contained in JDK9+)
	implementation 'javax.xml.bind:jaxb-api:2.+'
	implementation 'com.sun.xml.bind:jaxb-core:2.+'
	implementation 'com.sun.xml.bind:jaxb-impl:2.+'
	implementation 'javax.activation:activation:1.+'

	//database
	implementation 'org.postgresql:postgresql:42.+'
	implementation 'javax.persistence:javax.persistence-api:2.2'

	// logging
	implementation 'org.apache.logging.log4j:log4j-1.2-api:2.+' // log4j
	implementation 'org.apache.logging.log4j:log4j-core:2.+' // log4j

	implementation 'commons-io:commons-io:2.+'
	implementation 'org.apache.commons:commons-compress:1.+'
	implementation 'org.jetbrains:annotations:16.+'
	annotationProcessor 'info.picocli:picocli-codegen:4.6.1'
	implementation 'info.picocli:picocli:4.6.1'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.+'

	//tests
	testImplementation 'junit:junit:4.+'
	testImplementation 'org.testcontainers:postgresql:1.16.0'

}

wrapper {
	gradleVersion = '7.2'
}

/* Maven publish - start */
task sourcesJar(type: Jar) {
	getArchiveClassifier().set('sources')
	from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
	getArchiveClassifier().set('javadoc')
	from(javadoc.destinationDir)
}

if (project.hasProperty('user') && project.hasProperty('password')) {
	artifactory {
		contextUrl = "https://simona.ie3.e-technik.tu-dortmund.de/artifactory"
		publish {
			repository {
				def releasesRepoUrl = 'libs-release-local'
				def snapshotsRepoUrl = 'libs-snapshot-local'
				repoKey = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
				username = project.getProperty('user')
				password = project.getProperty('password')
				maven = true
			}
			defaults {
				publications('mavenJava')
			}
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = 'dwdtools'
			from components.java
			artifact sourcesJar
			artifact javadocJar
			artifact fatJar
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
		}
	}
	repositories {
		maven {
			def releasesRepoUrl = "$buildDir/repos/releases"
			def snapshotsRepoUrl = "$buildDir/repos/snapshots"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
}
/* Maven publish - end */

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

application {
	mainClassName = mainClass
}

jar {
	manifest {
		attributes(
				'Main-Class': mainClass
		)
	}
}

run {
	// Gradle uses an empty Input as default, leading to a non-blocking behaviour and thus an immediate shutdown
	standardInput = System.in
}
